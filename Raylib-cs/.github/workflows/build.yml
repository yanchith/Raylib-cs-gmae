name: Build
on:
  push:
    branches: master
  pull_request:
    branches: '*'
    paths-ignore:
      - 'README.md'
      - '.github/ISSUE_TEMPLATE/**'
  workflow_dispatch:
jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      pkgversion: ${{ steps.version.outputs.pkgversion }}
    steps:
      - name: checkout repository
        uses: actions/checkout@v3

      - name: check raylib version
        id: version
        shell: bash
        run: |
          echo "version=$(sed -n 's/.*<TargetRaylibTag>\(.*\)<\/TargetRaylibTag>.*/\1/p' Raylib-cs/Raylib-cs.csproj)">> ${GITHUB_OUTPUT}
          echo "pkgversion=$(sed -n 's/.*<PackageVersion>\(.*\)<\/PackageVersion>.*/\1/p' Raylib-cs/Raylib-cs.csproj)">> ${GITHUB_OUTPUT}

  build-linux:
    runs-on: ubuntu-latest
    needs: prepare
    steps:
      - name: setup dependencies
        run: |
          sudo apt-get update
          sudo apt-get install \
            libasound2-dev \
            libx11-dev \
            libxrandr-dev \
            libxi-dev \
            libgl1-mesa-dev \
            libglu1-mesa-dev \
            libxcursor-dev \
            libxinerama-dev

      - name: build raylib
        env:
          version: ${{ needs.prepare.outputs.version }}
        run: |
          curl -Lso raylib.zip https://github.com/raysan5/raylib/archive/refs/tags/${version}.zip
          unzip -qq raylib.zip
          cmake -S raylib-${version} \
            -B build \
            -D CMAKE_BUILD_TYPE=Release \
            -D BUILD_SHARED_LIBS=ON \
            -D BUILD_EXAMPLES=OFF
          cmake --build build --config Release

      - name: upload build
        uses: actions/upload-artifact@v3
        with:
          name: linux-x64
          path: build/raylib/libraylib.so
          if-no-files-found: error

  build-osx:
    runs-on: macos-latest
    needs: prepare
    strategy:
      matrix:
        name: [arm64, x64]
        include:
          - name: arm64
            arch: arm64
          - name: x64
            arch: x86_64
    steps:
      - name: build raylib
        env:
          version: ${{ needs.prepare.outputs.version }}
        run: |
          curl -Lso raylib.zip https://github.com/raysan5/raylib/archive/refs/tags/${version}.zip
          unzip -qq raylib.zip
          cmake -S raylib-${version} \
            -B build \
            -D CMAKE_BUILD_TYPE=Release \
            -D CMAKE_OSX_ARCHITECTURES=${{ matrix.arch }} \
            -D BUILD_SHARED_LIBS=ON \
            -D BUILD_EXAMPLES=OFF
          cmake --build build --config Release

      - name: upload build
        uses: actions/upload-artifact@v3
        with:
          name: osx-${{ matrix.name }}
          path: build/raylib/libraylib.dylib
          if-no-files-found: error

  build-windows:
    runs-on: windows-latest
    needs: prepare
    strategy:
      matrix:
        name: [x86, x64]
        include:
          - name: x86
            arch: win32
          - name: x64
            arch: x64
    steps:
      - name: build ${{ matrix.arch }}
        shell: bash
        env:
          version: ${{ needs.prepare.outputs.version }}
        run: |
          curl -Lso raylib.zip https://github.com/raysan5/raylib/archive/refs/tags/${version}.zip
          unzip -qq raylib.zip
          cmake -S raylib-${version} \
            -A ${{ matrix.arch }} \
            -B build \
            -D CMAKE_BUILD_TYPE=Release \
            -D BUILD_SHARED_LIBS=ON \
            -D BUILD_EXAMPLES=OFF
          cmake --build build --config Release

      - name: upload build
        uses: actions/upload-artifact@v3
        with:
          name: win-${{ matrix.name }}
          path: build/raylib/Release/raylib.dll
          if-no-files-found: error

  publish:
    runs-on: ubuntu-latest
    needs:
      - prepare
      - build-linux
      - build-osx
      - build-windows
    steps:
      - name: checkout repository
        uses: actions/checkout@v3

      - uses: actions/download-artifact@v3
        with:
          name: linux-x64
          path: Raylib-cs/runtimes/linux-x64/native

      - uses: actions/download-artifact@v3
        with:
          name: osx-arm64
          path: Raylib-cs/runtimes/osx-arm64/native

      - uses: actions/download-artifact@v3
        with:
          name: osx-x64
          path: Raylib-cs/runtimes/osx-x64/native

      - uses: actions/download-artifact@v3
        with:
          name: win-x86
          path: Raylib-cs/runtimes/win-x86/native

      - uses: actions/download-artifact@v3
        with:
          name: win-x64
          path: Raylib-cs/runtimes/win-x64/native

      - name: Setup dotnet
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 6.0.x

      - name: Create NuGet Package
        run: dotnet pack -c Release Raylib-cs

      - name: Upload NuGet Package As Artifact
        uses: actions/upload-artifact@v3
        with:
          path: Raylib-cs/bin/Release/Raylib-cs.${{ needs.prepare.outputs.pkgversion }}.*pkg

      - name: Upload NuGet Package As Release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: Raylib-cs/bin/Release/Raylib-cs.${{ needs.prepare.outputs.pkgversion }}.*pkg

      - name: Publish to NuGet
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          dotnet nuget push \
            Raylib-cs/bin/Release/Raylib-cs.${{ needs.prepare.outputs.pkgversion }}.nupkg \
            --api-key ${{secrets.NUGET_API_KEY}}
